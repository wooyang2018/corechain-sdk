// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: contract_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NativeCodeClient is the client API for NativeCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NativeCodeClient interface {
	Call(ctx context.Context, in *NativeCallRequest, opts ...grpc.CallOption) (*NativeCallResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type nativeCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNativeCodeClient(cc grpc.ClientConnInterface) NativeCodeClient {
	return &nativeCodeClient{cc}
}

func (c *nativeCodeClient) Call(ctx context.Context, in *NativeCallRequest, opts ...grpc.CallOption) (*NativeCallResponse, error) {
	out := new(NativeCallResponse)
	err := c.cc.Invoke(ctx, "/protos.NativeCode/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nativeCodeClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protos.NativeCode/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NativeCodeServer is the server API for NativeCode service.
// All implementations should embed UnimplementedNativeCodeServer
// for forward compatibility
type NativeCodeServer interface {
	Call(context.Context, *NativeCallRequest) (*NativeCallResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

// UnimplementedNativeCodeServer should be embedded to have forward compatible implementations.
type UnimplementedNativeCodeServer struct {
}

func (UnimplementedNativeCodeServer) Call(context.Context, *NativeCallRequest) (*NativeCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedNativeCodeServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeNativeCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NativeCodeServer will
// result in compilation errors.
type UnsafeNativeCodeServer interface {
	mustEmbedUnimplementedNativeCodeServer()
}

func RegisterNativeCodeServer(s grpc.ServiceRegistrar, srv NativeCodeServer) {
	s.RegisterService(&NativeCode_ServiceDesc, srv)
}

func _NativeCode_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeCodeServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.NativeCode/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeCodeServer).Call(ctx, req.(*NativeCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NativeCode_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NativeCodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.NativeCode/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NativeCodeServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NativeCode_ServiceDesc is the grpc.ServiceDesc for NativeCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NativeCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.NativeCode",
	HandlerType: (*NativeCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _NativeCode_Call_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _NativeCode_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract_service.proto",
}

// SyscallClient is the client API for Syscall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyscallClient interface {
	// KV service
	PutObject(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	GetObject(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	DeleteObject(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	NewIterator(ctx context.Context, in *IteratorRequest, opts ...grpc.CallOption) (*IteratorResponse, error)
	// Chain service
	QueryTx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error)
	QueryBlock(ctx context.Context, in *QueryBlockRequest, opts ...grpc.CallOption) (*QueryBlockResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	ContractCall(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*ContractCallResponse, error)
	CrossContractQuery(ctx context.Context, in *CrossContractQueryRequest, opts ...grpc.CallOption) (*CrossContractQueryResponse, error)
	GetAccountAddresses(ctx context.Context, in *GetAccountAddressesRequest, opts ...grpc.CallOption) (*GetAccountAddressesResponse, error)
	// Heartbeat
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Post log
	PostLog(ctx context.Context, in *PostLogRequest, opts ...grpc.CallOption) (*PostLogResponse, error)
	GetCallArgs(ctx context.Context, in *GetCallArgsRequest, opts ...grpc.CallOption) (*CallArgs, error)
	SetOutput(ctx context.Context, in *SetOutputRequest, opts ...grpc.CallOption) (*SetOutputResponse, error)
	// Send Event
	EmitEvent(ctx context.Context, in *EmitEventRequest, opts ...grpc.CallOption) (*EmitEventResponse, error)
}

type syscallClient struct {
	cc grpc.ClientConnInterface
}

func NewSyscallClient(cc grpc.ClientConnInterface) SyscallClient {
	return &syscallClient{cc}
}

func (c *syscallClient) PutObject(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) GetObject(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) DeleteObject(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) NewIterator(ctx context.Context, in *IteratorRequest, opts ...grpc.CallOption) (*IteratorResponse, error) {
	out := new(IteratorResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/NewIterator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) QueryTx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error) {
	out := new(QueryTxResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/QueryTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) QueryBlock(ctx context.Context, in *QueryBlockRequest, opts ...grpc.CallOption) (*QueryBlockResponse, error) {
	out := new(QueryBlockResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/QueryBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) ContractCall(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*ContractCallResponse, error) {
	out := new(ContractCallResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/ContractCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) CrossContractQuery(ctx context.Context, in *CrossContractQueryRequest, opts ...grpc.CallOption) (*CrossContractQueryResponse, error) {
	out := new(CrossContractQueryResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/CrossContractQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) GetAccountAddresses(ctx context.Context, in *GetAccountAddressesRequest, opts ...grpc.CallOption) (*GetAccountAddressesResponse, error) {
	out := new(GetAccountAddressesResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/GetAccountAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) PostLog(ctx context.Context, in *PostLogRequest, opts ...grpc.CallOption) (*PostLogResponse, error) {
	out := new(PostLogResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/PostLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) GetCallArgs(ctx context.Context, in *GetCallArgsRequest, opts ...grpc.CallOption) (*CallArgs, error) {
	out := new(CallArgs)
	err := c.cc.Invoke(ctx, "/protos.Syscall/GetCallArgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) SetOutput(ctx context.Context, in *SetOutputRequest, opts ...grpc.CallOption) (*SetOutputResponse, error) {
	out := new(SetOutputResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/SetOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syscallClient) EmitEvent(ctx context.Context, in *EmitEventRequest, opts ...grpc.CallOption) (*EmitEventResponse, error) {
	out := new(EmitEventResponse)
	err := c.cc.Invoke(ctx, "/protos.Syscall/EmitEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyscallServer is the server API for Syscall service.
// All implementations should embed UnimplementedSyscallServer
// for forward compatibility
type SyscallServer interface {
	// KV service
	PutObject(context.Context, *PutRequest) (*PutResponse, error)
	GetObject(context.Context, *GetRequest) (*GetResponse, error)
	DeleteObject(context.Context, *DeleteRequest) (*DeleteResponse, error)
	NewIterator(context.Context, *IteratorRequest) (*IteratorResponse, error)
	// Chain service
	QueryTx(context.Context, *QueryTxRequest) (*QueryTxResponse, error)
	QueryBlock(context.Context, *QueryBlockRequest) (*QueryBlockResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	ContractCall(context.Context, *ContractCallRequest) (*ContractCallResponse, error)
	CrossContractQuery(context.Context, *CrossContractQueryRequest) (*CrossContractQueryResponse, error)
	GetAccountAddresses(context.Context, *GetAccountAddressesRequest) (*GetAccountAddressesResponse, error)
	// Heartbeat
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Post log
	PostLog(context.Context, *PostLogRequest) (*PostLogResponse, error)
	GetCallArgs(context.Context, *GetCallArgsRequest) (*CallArgs, error)
	SetOutput(context.Context, *SetOutputRequest) (*SetOutputResponse, error)
	// Send Event
	EmitEvent(context.Context, *EmitEventRequest) (*EmitEventResponse, error)
}

// UnimplementedSyscallServer should be embedded to have forward compatible implementations.
type UnimplementedSyscallServer struct {
}

func (UnimplementedSyscallServer) PutObject(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedSyscallServer) GetObject(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedSyscallServer) DeleteObject(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedSyscallServer) NewIterator(context.Context, *IteratorRequest) (*IteratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewIterator not implemented")
}
func (UnimplementedSyscallServer) QueryTx(context.Context, *QueryTxRequest) (*QueryTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTx not implemented")
}
func (UnimplementedSyscallServer) QueryBlock(context.Context, *QueryBlockRequest) (*QueryBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlock not implemented")
}
func (UnimplementedSyscallServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedSyscallServer) ContractCall(context.Context, *ContractCallRequest) (*ContractCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCall not implemented")
}
func (UnimplementedSyscallServer) CrossContractQuery(context.Context, *CrossContractQueryRequest) (*CrossContractQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossContractQuery not implemented")
}
func (UnimplementedSyscallServer) GetAccountAddresses(context.Context, *GetAccountAddressesRequest) (*GetAccountAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAddresses not implemented")
}
func (UnimplementedSyscallServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSyscallServer) PostLog(context.Context, *PostLogRequest) (*PostLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLog not implemented")
}
func (UnimplementedSyscallServer) GetCallArgs(context.Context, *GetCallArgsRequest) (*CallArgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallArgs not implemented")
}
func (UnimplementedSyscallServer) SetOutput(context.Context, *SetOutputRequest) (*SetOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOutput not implemented")
}
func (UnimplementedSyscallServer) EmitEvent(context.Context, *EmitEventRequest) (*EmitEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitEvent not implemented")
}

// UnsafeSyscallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyscallServer will
// result in compilation errors.
type UnsafeSyscallServer interface {
	mustEmbedUnimplementedSyscallServer()
}

func RegisterSyscallServer(s grpc.ServiceRegistrar, srv SyscallServer) {
	s.RegisterService(&Syscall_ServiceDesc, srv)
}

func _Syscall_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).PutObject(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).GetObject(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).DeleteObject(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_NewIterator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IteratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).NewIterator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/NewIterator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).NewIterator(ctx, req.(*IteratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).QueryTx(ctx, req.(*QueryTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_QueryBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).QueryBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/QueryBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).QueryBlock(ctx, req.(*QueryBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_ContractCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).ContractCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/ContractCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).ContractCall(ctx, req.(*ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_CrossContractQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossContractQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).CrossContractQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/CrossContractQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).CrossContractQuery(ctx, req.(*CrossContractQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_GetAccountAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).GetAccountAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/GetAccountAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).GetAccountAddresses(ctx, req.(*GetAccountAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_PostLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).PostLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/PostLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).PostLog(ctx, req.(*PostLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_GetCallArgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallArgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).GetCallArgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/GetCallArgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).GetCallArgs(ctx, req.(*GetCallArgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_SetOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).SetOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/SetOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).SetOutput(ctx, req.(*SetOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syscall_EmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyscallServer).EmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Syscall/EmitEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyscallServer).EmitEvent(ctx, req.(*EmitEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Syscall_ServiceDesc is the grpc.ServiceDesc for Syscall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Syscall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Syscall",
	HandlerType: (*SyscallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _Syscall_PutObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Syscall_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Syscall_DeleteObject_Handler,
		},
		{
			MethodName: "NewIterator",
			Handler:    _Syscall_NewIterator_Handler,
		},
		{
			MethodName: "QueryTx",
			Handler:    _Syscall_QueryTx_Handler,
		},
		{
			MethodName: "QueryBlock",
			Handler:    _Syscall_QueryBlock_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Syscall_Transfer_Handler,
		},
		{
			MethodName: "ContractCall",
			Handler:    _Syscall_ContractCall_Handler,
		},
		{
			MethodName: "CrossContractQuery",
			Handler:    _Syscall_CrossContractQuery_Handler,
		},
		{
			MethodName: "GetAccountAddresses",
			Handler:    _Syscall_GetAccountAddresses_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Syscall_Ping_Handler,
		},
		{
			MethodName: "PostLog",
			Handler:    _Syscall_PostLog_Handler,
		},
		{
			MethodName: "GetCallArgs",
			Handler:    _Syscall_GetCallArgs_Handler,
		},
		{
			MethodName: "SetOutput",
			Handler:    _Syscall_SetOutput_Handler,
		},
		{
			MethodName: "EmitEvent",
			Handler:    _Syscall_EmitEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract_service.proto",
}
